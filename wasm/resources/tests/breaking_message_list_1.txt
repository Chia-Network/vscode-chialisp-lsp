{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"chialisp":{"stderrLogPath":"/tmp/dbg.log"}}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","languageId":"chialisp","version":1,"text":"(mod (A) ;;; COLLATZ conjecture\n\n  ;; set language standard\n  (include *standard-cl-22*)\n\n  ;; Determine if number is odd\n  ;; test.\n  (defun-inline odd (X) (logand X 1))\n  ;; Actual collatz function\n  ;; determines number of step til 1\n  (defun collatz (N X)\n    (if (= X 1) ; We got 1\n      N ; Return the number of steps\n      (let ((incN (+ N 1))) ; Next N\n        (if (odd X) ; Is it odd?\n          (collatz incN (+ 1 (* 3 X))) ; Odd? 3 X + 1\n          (collatz incN (/ X 2)) ; Even? X / 2\n          )\n        )\n      )\n    )\n  (collatz 1 5) ; Run it\n  )\n"}}}
{"jsonrpc":"2.0","id":1,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"}}}
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/target/.rustc_info.json","type":2}]}}
{"jsonrpc":"2.0","id":2,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"}}}
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/target/.rustc_info.json","type":2},{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/target/.rustc_info.json","type":2}]}}
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/target/.rustc_info.json","type":2}]}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/coin.clvm","languageId":"chialisp","version":1,"text":"(a (q 2 (q 4 (c (q . 51) (c (a 22 (c 2 (c 5 (c (a 30 (c 2 (c 11 ()))) (c (a 30 (c 2 (c 5 ()))) ()))))) (c 11 ()))) ()) (c (q ((a . 4) 1 . 1) (a 2 (i 5 (q 2 26 (c 2 (c 13 (c (sha256 18 (sha256 20 24) (sha256 18 (sha256 18 (sha256 20 28) 9) (sha256 18 11 (sha256 20 ())))) ())))) (q . 11)) 1) (sha256 18 (sha256 20 16) (sha256 18 (sha256 18 (sha256 20 28) 5) (sha256 18 (a 26 (c 2 (c 7 (c (sha256 20 20) ())))) (sha256 20 ())))) 2 (i (l 5) (q 11 (q . 2) (a 30 (c 2 (c 9 ()))) (a 30 (c 2 (c 13 ())))) (q 11 (q . 1) 5)) 1) 1)) (c (q . 0x21de1392fbce0bac76c115cd73b3f6373cdc062e5f799d2f372905b682dbee5d) (c (q . 1) 1)))\n"}}}
{"jsonrpc":"2.0","id":3,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/coin.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/coin.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/cvt.clvm","languageId":"chialisp","version":1,"text":"(2 (1 16 (1 . 3) 5) (4 (1) 1))\n"}}}
{"jsonrpc":"2.0","id":4,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/cvt.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/cvt.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry-and-treehash.clinc","languageId":"chialisp","version":1,"text":"(\n  ;; The code below is used to calculate of the tree hash of a curried function\n  ;; without actually doing the curry, and using other optimization tricks\n  ;; like unrolling `sha256tree`.\n\n  (defconstant ONE 1)\n  (defconstant TWO 2)\n  (defconstant A_KW #a)\n  (defconstant Q_KW #q)\n  (defconstant C_KW #c)\n\n  ;; Given the tree hash `environment-hash` of an environment tree E\n  ;; and the tree hash `parameter-hash` of a constant parameter P\n  ;; return the tree hash of the tree corresponding to\n  ;; `(c (q . P) E)`\n  ;; This is the new environment tree with the addition parameter P curried in.\n  ;;\n  ;; Note that `(c (q . P) E)` = `(c . ((q . P) . (E . 0)))`\n\n  (defun-inline update-hash-for-parameter-hash (parameter-hash environment-hash)\n     (sha256 TWO (sha256 ONE C_KW)\n                 (sha256 TWO (sha256 TWO (sha256 ONE Q_KW) parameter-hash)\n                             (sha256 TWO environment-hash (sha256 ONE 0))))\n  )\n\n  ;; This function recursively calls `update-hash-for-parameter-hash`, updating `environment-hash`\n  ;; along the way.\n\n  (defun build-curry-list (reversed-curry-parameter-hashes environment-hash)\n     (if reversed-curry-parameter-hashes\n         (build-curry-list (r reversed-curry-parameter-hashes)\n                           (update-hash-for-parameter-hash (f reversed-curry-parameter-hashes) environment-hash))\n         environment-hash\n     )\n  )\n\n  ;; Given the tree hash `environment-hash` of an environment tree E\n  ;; and the tree hash `function-hash` of a function tree F\n  ;; return the tree hash of the tree corresponding to\n  ;; `(a (q . F) E)`\n  ;; This is the hash of a new function that adopts the new environment E.\n  ;; This is used to build of the tree hash of a curried function.\n  ;;\n  ;; Note that `(a (q . F) E)` = `(a . ((q . F)  . (E . 0)))`\n\n  (defun-inline tree-hash-of-apply (function-hash environment-hash)\n     (sha256 TWO (sha256 ONE A_KW)\n                 (sha256 TWO (sha256 TWO (sha256 ONE Q_KW) function-hash)\n                             (sha256 TWO environment-hash (sha256 ONE 0))))\n  )\n\n  ;; function-hash:\n  ;;   the hash of a puzzle function, ie. a `mod`\n  ;;\n  ;; reversed-curry-parameter-hashes:\n  ;;   a list of pre-hashed trees representing parameters to be curried into the puzzle.\n  ;;   Note that this must be applied in REVERSED order. This may seem strange, but it greatly simplifies\n  ;;   the underlying code, since we calculate the tree hash from the bottom nodes up, and the last\n  ;;   parameters curried must have their hashes calculated first.\n  ;;\n  ;; we return the hash of the curried expression\n  ;;   (a (q . function-hash) (c (cp1 (c cp2 (c ... 1)...))))\n  ;;\n  ;; Note that from a user's perspective the hashes passed in here aren't simply\n  ;; the hashes of the desired parameters, but their treehash representation since\n  ;; that's the form we're assuming they take in the acutal curried program.\n\n  (defun puzzle-hash-of-curried-function (function-hash . reversed-curry-parameter-hashes)\n     (tree-hash-of-apply function-hash\n                         (build-curry-list reversed-curry-parameter-hashes (sha256 ONE ONE)))\n  )\n\n  (defconstant b32 32)\n\n  (defun-inline size_b32 (var)\n    (= (strlen var) 32)\n  )\n\n  (defun calculate_coin_id (parent puzzlehash amount)\n    (if (all (size_b32 parent) (size_b32 puzzlehash) (> amount -1))\n      (sha256 parent puzzlehash amount)\n      (x)\n    )\n  )\n\n  ; takes a lisp tree and returns the hash of it\n  (defun sha256tree (TREE)\n        (if (l TREE)\n            (sha256 2 (sha256tree (f TREE)) (sha256tree (r TREE)))\n            (sha256 1 TREE)))\n\n)\n"}}}
{"jsonrpc":"2.0","id":5,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry-and-treehash.clinc"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry-and-treehash.clinc"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry_and_treehash.clib","languageId":"chialisp","version":1,"text":"(\n  ;; The code below is used to calculate of the tree hash of a curried function\n  ;; without actually doing the curry, and using other optimization tricks\n  ;; like unrolling `sha256tree`.\n\n  (defconstant ONE 1)\n  (defconstant TWO 2)\n  (defconstant A_KW #a)\n  (defconstant Q_KW #q)\n  (defconstant C_KW #c)\n\n  ;; Given the tree hash `environment-hash` of an environment tree E\n  ;; and the tree hash `parameter-hash` of a constant parameter P\n  ;; return the tree hash of the tree corresponding to\n  ;; `(c (q . P) E)`\n  ;; This is the new environment tree with the addition parameter P curried in.\n  ;;\n  ;; Note that `(c (q . P) E)` = `(c . ((q . P) . (E . 0)))`\n\n  (defun-inline update-hash-for-parameter-hash (parameter-hash environment-hash)\n     (sha256 TWO (sha256 ONE C_KW)\n                 (sha256 TWO (sha256 TWO (sha256 ONE Q_KW) parameter-hash)\n                             (sha256 TWO environment-hash (sha256 ONE 0))))\n  )\n\n  ;; This function recursively calls `update-hash-for-parameter-hash`, updating `environment-hash`\n  ;; along the way.\n\n  (defun build-curry-list (reversed-curry-parameter-hashes environment-hash)\n     (if reversed-curry-parameter-hashes\n         (build-curry-list (r reversed-curry-parameter-hashes)\n                           (update-hash-for-parameter-hash (f reversed-curry-parameter-hashes) environment-hash))\n         environment-hash\n     )\n  )\n\n  ;; Given the tree hash `environment-hash` of an environment tree E\n  ;; and the tree hash `function-hash` of a function tree F\n  ;; return the tree hash of the tree corresponding to\n  ;; `(a (q . F) E)`\n  ;; This is the hash of a new function that adopts the new environment E.\n  ;; This is used to build of the tree hash of a curried function.\n  ;;\n  ;; Note that `(a (q . F) E)` = `(a . ((q . F)  . (E . 0)))`\n\n  (defun-inline tree-hash-of-apply (function-hash environment-hash)\n     (sha256 TWO (sha256 ONE A_KW)\n                 (sha256 TWO (sha256 TWO (sha256 ONE Q_KW) function-hash)\n                             (sha256 TWO environment-hash (sha256 ONE 0))))\n  )\n\n  ;; function-hash:\n  ;;   the hash of a puzzle function, ie. a `mod`\n  ;;\n  ;; reversed-curry-parameter-hashes:\n  ;;   a list of pre-hashed trees representing parameters to be curried into the puzzle.\n  ;;   Note that this must be applied in REVERSED order. This may seem strange, but it greatly simplifies\n  ;;   the underlying code, since we calculate the tree hash from the bottom nodes up, and the last\n  ;;   parameters curried must have their hashes calculated first.\n  ;;\n  ;; we return the hash of the curried expression\n  ;;   (a (q . function-hash) (c (cp1 (c cp2 (c ... 1)...))))\n  ;;\n  ;; Note that from a user's perspective the hashes passed in here aren't simply\n  ;; the hashes of the desired parameters, but their treehash representation since\n  ;; that's the form we're assuming they take in the acutal curried program.\n\n  (defun puzzle-hash-of-curried-function (function-hash . reversed-curry-parameter-hashes)\n     (tree-hash-of-apply function-hash\n                         (build-curry-list reversed-curry-parameter-hashes (sha256 ONE ONE)))\n  )\n)\n"}}}
{"jsonrpc":"2.0","id":6,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry_and_treehash.clib"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/curry_and_treehash.clib"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/defun_sha256.cl","languageId":"chialisp","version":1,"text":"(mod (X) : ((Pair Atom Unit) -> Atom32)\n  (defun F (X) : ((Pair Atom Unit) -> Atom32)\n    (sha256 1 X)\n    )\n\n  (F X)\n  )\n"}}}
{"jsonrpc":"2.0","id":7,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/defun_sha256.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/defun_sha256.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/doesnt_checks.cl","languageId":"chialisp","version":1,"text":"(mod ((X : (Pair Atom Unit))) -> Atom32 (sha256 1 X))\n"}}}
{"jsonrpc":"2.0","id":8,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/doesnt_checks.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/doesnt_checks.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.cl","languageId":"chialisp","version":1,"text":"(mod (Z)\n  (defun F (X) (x X))\n  (defun G (X) (F G))\n  (G Z)\n  )\n  "}}}
{"jsonrpc":"2.0","id":9,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.clvm","languageId":"chialisp","version":1,"text":"(a (q 2 6 (c 2 (c 5 ()))) (c (q (x 5) 2 4 (c 2 (c 6 ()))) 1))\n"}}}
{"jsonrpc":"2.0","id":10,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/exn-path-test.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fact.cl","languageId":"chialisp","version":1,"text":"(mod (X)\n  (defun fact (X) (if (= X 1) 1 (* X (fact (- X 1)))))\n  (fact X)\n  )\n"}}}
{"jsonrpc":"2.0","id":11,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fact.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fact.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fixedlist.cl","languageId":"chialisp","version":1,"text":"(mod (X Y Z) : ((FixedList Atom Atom32 Atom) -> (FixedList Atom32 Atom))\n  (list Y Z)\n  )\n"}}}
{"jsonrpc":"2.0","id":12,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fixedlist.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/fixedlist.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.cl","languageId":"chialisp","version":1,"text":"(mod params\n (defun ident (arg)\n  (f (list arg))\n )\n\n (ident (ident params))\n)\n"}}}
{"jsonrpc":"2.0","id":13,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.clvm","languageId":"chialisp","version":1,"text":"(a (q 2 2 (c 2 (c (a 2 (c 2 (c 3 ()))) ()))) (c (q . 5) 1))\n"}}}
{"jsonrpc":"2.0","id":14,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/idpuz.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifty.cl","languageId":"chialisp","version":1,"text":"(mod () -> Any\n  (defun F () -> Atom 1)\n  (defun G () -> (Pair Atom Unit) (c 1 ()))\n  (if 1 (F) (G))\n  )\n\n"}}}
{"jsonrpc":"2.0","id":15,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifty.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifty.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/iftyold.cl","languageId":"chialisp","version":1,"text":"(mod () -> Any\n  (defun F () -> Atom 1)\n  (defun G () -> (Pair Atom Unit) (c 1 ()))\n  (if 1 (F) (G))\n  )\n\n"}}}
{"jsonrpc":"2.0","id":16,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/iftyold.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/iftyold.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit.cl","languageId":"chialisp","version":1,"text":"(mod () -> Any\n  (defun F () -> Unit ())\n  (defun G () -> (Pair Atom Unit) (c 1 ()))\n  (if 1 (F) (G))\n  )\n"}}}
{"jsonrpc":"2.0","id":17,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit2.cl","languageId":"chialisp","version":1,"text":"(mod () -> Any\n  (defun F () -> (Nullable (Pair Atom Unit)) ())\n  (defun G () -> (Nullable (Pair Atom Unit)) (c 1 ()))\n  (if 1 (F) (G))\n  )\n"}}}
{"jsonrpc":"2.0","id":18,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit2.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/ifunit2.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/inc.clib","languageId":"chialisp","version":1,"text":"(\n  (defun testfunc () (+ x 1))\n)"}}}
{"jsonrpc":"2.0","id":19,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/inc.clib"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/inc.clib"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.cl","languageId":"chialisp","version":1,"text":"(mod (MOD_HASH TOKEN_A_AMOUNT TOKEN_B_AMOUNT K token_a_delta token_b_delta)\n    (include \"condition_codes.clib\")\n    (include \"curry-and-treehash.clinc\")\n\n    (defun sha256tree1 (TREE)\n        (if (l TREE)\n            (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))\n            (sha256 1 TREE)\n        )\n    )\n    (defun return-new-coin (mod_hash new_token_a_amount new_token_b_amount K)\n        (list (list mod_hash (sha256tree1 mod_hash))\n            (list\n                CREATE_COIN\n               (puzzle-hash-of-curried-function\n                    mod_hash (sha256tree1 mod_hash)\n                )\n                1\n            )\n        )\n    )\n\n        (if (all (= K (* (+ TOKEN_A_AMOUNT token_a_delta) (+ TOKEN_B_AMOUNT token_b_delta))) (> (+ TOKEN_A_AMOUNT token_a_delta) 0) (> (+ TOKEN_B_AMOUNT token_b_delta) 0) )\n            (return-new-coin MOD_HASH (+ TOKEN_A_AMOUNT token_a_delta) (+ TOKEN_B_AMOUNT token_b_delta) K)\n            (x (+ TOKEN_A_AMOUNT token_a_delta) (+ TOKEN_B_AMOUNT token_b_delta))\n        )\n    )\n)"}}}
{"jsonrpc":"2.0","id":20,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.clvm","languageId":"chialisp","version":1,"text":"(a (q 2 (i (all (= 47 (* (+ 11 95) (+ 23 -65))) (> (+ 11 95) ()) (> (+ 23 -65) ())) (q 2 46 (c 2 (c 5 (c (+ 11 95) (c (+ 23 -65) (c 47 ())))))) (q 8 (+ 11 95) (+ 23 -65))) 1) (c (q ((a . 51) 4 1 . 1) (a 2 (i 5 (q 2 26 (c 2 (c 13 (c (sha256 18 (sha256 44 20) (sha256 18 (sha256 18 (sha256 44 60) 9) (sha256 18 11 (sha256 44 ())))) ())))) (q . 11)) 1) (sha256 18 (sha256 44 16) (sha256 18 (sha256 18 (sha256 44 60) 5) (sha256 18 (a 26 (c 2 (c 7 (c (sha256 44 44) ())))) (sha256 44 ())))) (c (c 5 (c (a 62 (c 2 (c 5 ()))) ())) (c (c 24 (c (a 22 (c 2 (c 5 (c (a 62 (c 2 (c 5 ()))) ())))) (q 1))) ())) 2 (i (l 5) (q 11 (q . 2) (a 62 (c 2 (c 9 ()))) (a 62 (c 2 (c 13 ())))) (q 11 (q . 1) 5)) 1) 1))\n"}}}
{"jsonrpc":"2.0","id":21,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/sebt2.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.cl","languageId":"chialisp","version":1,"text":"(mod (X)\n      (defun F (P X) (if X (F (sha256 P (f X)) (r X)) P))\n      (F (sha256 1) X)\n      )\n      "}}}
{"jsonrpc":"2.0","id":22,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.clvm","languageId":"chialisp","version":1,"text":"(a (q 2 2 (c 2 (c (q . 0x4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a) (c 5 ())))) (c (q 2 (i 11 (q 2 2 (c 2 (c (sha256 5 19) (c 27 ())))) (q . 5)) 1) 1))\n"}}}
{"jsonrpc":"2.0","id":23,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/te1.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.cl","languageId":"chialisp","version":1,"text":"(mod (obj)\n     (include *standard-cl-21*)\n     (defun-inline a-of ((A . B)) A)\n     (defun-inline b-of ((A . B)) B)\n     (+ (a-of obj) (b-of obj))\n     )\n"}}}
{"jsonrpc":"2.0","id":24,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.clvm","languageId":"chialisp","version":1,"text":"FAIL: path into atom \"obj\"\n"}}}
{"jsonrpc":"2.0","id":25,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_des.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_opt_3.cl","languageId":"chialisp","version":1,"text":"(mod (arg_one)\n  (include *standard-cl-22*)\n  (defun factorial (input) (if (= input 1) 1 (* (factorial (- input 1)) input)))\n  (factorial arg_one)\n  )\n"}}}
{"jsonrpc":"2.0","id":26,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_opt_3.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test_opt_3.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test-fmt.cl","languageId":"chialisp","version":1,"text":"(mod (a b c) \n     (defun func (arg)\n    ( f (\n\n        list arg))\n    )\n\n  (func (+ a b c)\n    ))\n"}}}
{"jsonrpc":"2.0","id":27,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test-fmt.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test-fmt.cl"}}}
{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test-fmt.cl.new","type":2}]}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test.clvm","languageId":"chialisp","version":1,"text":"(a (q 4 (c (q . 51) (c (a 22 (c 2 (c 5 (c (a 30 (c 2 (c 11 ()))) (c (a 30 (c 2 (c 5 ()))) ()))))) (c 11 ()))) ()) (c (q ((a . 4) 1 . 1) (a 2 (i 5 (q 2 26 (c 2 (c 13 (c (sha256 18 (sha256 20 24) (sha256 18 (sha256 18 (sha256 20 28) 9) (sha256 18 11 (sha256 20 ())))) ())))) (q . 11)) 1) (sha256 18 (sha256 20 16) (sha256 18 (sha256 18 (sha256 20 28) 5) (sha256 18 (a 26 (c 2 (c 7 (c (sha256 20 20) ())))) (sha256 20 ())))) 2 (i (l 5) (q 11 (q . 2) (a 30 (c 2 (c 9 ()))) (a 30 (c 2 (c 13 ())))) (q 11 (q . 1) 5)) 1) 1))\n"}}}
{"jsonrpc":"2.0","id":28,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/test.clvm"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":2},"contentChanges":[{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"rangeLength":0,"text":" "}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":3},"contentChanges":[{"range":{"start":{"line":21,"character":15},"end":{"line":21,"character":15}},"rangeLength":0,"text":"()"}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":4},"contentChanges":[{"range":{"start":{"line":21,"character":16},"end":{"line":21,"character":16}},"rangeLength":0,"text":"m"}]}}
{"jsonrpc":"2.0","id":29,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"},"position":{"line":21,"character":17},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":5},"contentChanges":[{"range":{"start":{"line":21,"character":17},"end":{"line":21,"character":17}},"rangeLength":0,"text":"d"}]}}
{"jsonrpc":"2.0","id":30,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":6},"contentChanges":[{"range":{"start":{"line":21,"character":18},"end":{"line":21,"character":18}},"rangeLength":0,"text":" "}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":7},"contentChanges":[{"range":{"start":{"line":21,"character":18},"end":{"line":21,"character":19}},"rangeLength":1,"text":""}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":8},"contentChanges":[{"range":{"start":{"line":21,"character":17},"end":{"line":21,"character":18}},"rangeLength":1,"text":""}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":9},"contentChanges":[{"range":{"start":{"line":21,"character":17},"end":{"line":21,"character":17}},"rangeLength":0,"text":"o"}]}}
{"jsonrpc":"2.0","id":31,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"},"position":{"line":21,"character":18},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":32,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":10},"contentChanges":[{"range":{"start":{"line":21,"character":18},"end":{"line":21,"character":18}},"rangeLength":0,"text":"d"}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":11},"contentChanges":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":19}},"rangeLength":0,"text":" "}]}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":12},"contentChanges":[{"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":20}},"rangeLength":0,"text":"()"}]}}
{"jsonrpc":"2.0","id":33,"method":"textDocument/semanticTokens/full","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl"}}}
# exn: RuntimeError: memory access out of bounds
# RuntimeError: memory access out of bounds
#     at wasm-function[325]:0xe5204
#     at wasm-function[98]:0x664b8
#     at wasm-function[166]:0x9216b
#     at wasm-function[166]:0x921a2
#     at wasm-function[98]:0x66894
#     at wasm-function[166]:0x9216b
#     at wasm-function[166]:0x921a2
#     at wasm-function[166]:0x921a2
#     at wasm-function[98]:0x66894
#     at wasm-function[166]:0x9216b
#
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/arty/dev/chia/clvm_tools_rs/collatz.cl","version":13},"contentChanges":[{"range":{"start":{"line":21,"character":21},"end":{"line":21,"character":22}},"rangeLength":1,"text":")"}]}}
